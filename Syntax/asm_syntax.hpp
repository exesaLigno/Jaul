/*!
 *	@file asm_syntax.hpp
 *	@brief Указания для компиляции ассемблерных инструкций в байт код
 */

#ifndef ASM
	#define ASM(nasm, data_length, byte_code_length, ...)
#endif

// ASM("asm", bytes_count, {bytes...})
// unsigned char test[] = {0x45, 0xc3, 0xff}; - correct usage

ASM("nop", 0, 1, {0x90})

ASM("mov rax, %d", 4, 5, {0xb8, 0x00, 0x00, 0x00, 0x00})
ASM("mov rax, __float32__(%f)", 4, 5, {0xb8, 0x00, 0x00, 0x00, 0x00})
ASM("mov rbx, %d", 4, 5, {0xbb, 0x00, 0x00, 0x00, 0x00})
ASM("mov rcx, %d", 4, 5, {0xb9, 0x00, 0x00, 0x00, 0x00})
ASM("mov rdx, %d", 4, 5, {0xba, 0x00, 0x00, 0x00, 0x00})
ASM("mov rsi, %d", 4, 5, {0xbe, 0x00, 0x00, 0x00, 0x00})
ASM("mov rdi, %d", 4, 5, {0xbf, 0x00, 0x00, 0x00, 0x00})
ASM("mov rbp, %d", 4, 5, {0xbd, 0x00, 0x00, 0x00, 0x00})
ASM("mov rsp, %d", 4, 5, {0xbc, 0x00, 0x00, 0x00, 0x00})
ASM("mov r8, %d", 4, 6, {0x41, 0xb8, 0x00, 0x00, 0x00, 0x00})
ASM("mov r9, %d", 4, 6, {0x41, 0xb9, 0x00, 0x00, 0x00, 0x00})
ASM("mov r10, %d", 4, 6, {0x41, 0xba, 0x00, 0x00, 0x00, 0x00})
ASM("mov r11, %d", 4, 6, {0x41, 0xbb, 0x00, 0x00, 0x00, 0x00})
ASM("mov r12, %d", 4, 6, {0x41, 0xbc, 0x00, 0x00, 0x00, 0x00})
ASM("mov r13, %d", 4, 6, {0x41, 0xbd, 0x00, 0x00, 0x00, 0x00})
ASM("mov r14, %d", 4, 6, {0x41, 0xbe, 0x00, 0x00, 0x00, 0x00})
ASM("mov r15, %d", 4, 6, {0x41, 0xbf, 0x00, 0x00, 0x00, 0x00})

ASM("mov rax, rbx", 0, 3, {0x48, 0x89, 0xd8})
ASM("mov rbx, rax", 0, 3, {0x48, 0x89, 0xc3})
ASM("mov rcx, rax", 0, 3, {0x48, 0x89, 0xc1})
ASM("mov rax, rcx", 0, 3, {0x48, 0x89, 0xc8})
ASM("mov rbx, rcx", 0, 3, {0x48, 0x89, 0xcb})
ASM("mov rcx, rbx", 0, 3, {0x48, 0x89, 0xd9})
ASM("mov rbx, r15", 0, 3, {0x4c, 0x89, 0xfb})

ASM("mov dword [rsp], eax", 0, 3, {0x89, 0x04, 0x24})
ASM("mov dword [rbx], eax", 0, 2, {0x89, 0x03})
ASM("mov eax, dword [r15 + %d]", 1, 4, {0x41, 0x8b, 0x47, 0x00})
ASM("mov qword [rsp], %d", 4, 8, {0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00,})
ASM("mov rax, qword [r15 + %d]", 1, 4, {0x41, 0x8b, 0x47, 0x00})
ASM("push qword [r15 + %d]", 1, 4, {0x41, 0xff, 0x77, 0x00})
ASM("mov dword [rax], ebx", 0, 2, {0x89, 0x18})

ASM("push rax", 0, 1, {0x50})
ASM("push rbx", 0, 1, {0x53})
ASM("push rcx", 0, 1, {0x51})
ASM("push rdx", 0, 1, {0x52})
ASM("push rsi", 0, 1, {0x56})
ASM("push rdi", 0, 1, {0x57})
ASM("push rbp", 0, 1, {0x55})
ASM("push rsp", 0, 1, {0x54})
ASM("push r8", 0, 2, {0x41, 0x50})
ASM("push r9", 0, 2, {0x41, 0x51})
ASM("push r10", 0, 2, {0x41, 0x52})
ASM("push r11", 0, 2, {0x41, 0x53})
ASM("push r12", 0, 2, {0x41, 0x54})
ASM("push r13", 0, 2, {0x41, 0x55})
ASM("push r14", 0, 2, {0x41, 0x56})
ASM("push r15", 0, 2, {0x41, 0x57})

ASM("pop rax", 0, 1, {0x58})
ASM("pop rbx", 0, 1, {0x5b})
ASM("pop rcx", 0, 1, {0x59})
ASM("pop rdx", 0, 1, {0x5a})
ASM("pop rsi", 0, 1, {0x5e})
ASM("pop rdi", 0, 1, {0x5f})
ASM("pop rbp", 0, 1, {0x5d})
ASM("pop rsp", 0, 1, {0x5c})
ASM("pop r8", 0, 2, {0x41, 0x58})
ASM("pop r9", 0, 2, {0x41, 0x59})
ASM("pop r10", 0, 2, {0x41, 0x5a})
ASM("pop r11", 0, 2, {0x41, 0x5b})
ASM("pop r12", 0, 2, {0x41, 0x5c})
ASM("pop r13", 0, 2, {0x41, 0x5d})
ASM("pop r14", 0, 2, {0x41, 0x5e})
ASM("pop r15", 0, 2, {0x41, 0x5f})

ASM("mov cl, ah", 0, 2, {0x88, 0xe1})
ASM("mov dl, ah", 0, 2, {0x88, 0xe2})

ASM("and cl, 01000000b", 0, 3, {0x80, 0xe1, 0x40})
ASM("xor cl, 01000000b", 0, 3, {0x80, 0xf1, 0x40})

ASM("and cl, 10000000b", 0, 3, {0x80, 0xe1, 0x80})
ASM("xor cl, 10000000b", 0, 3, {0x80, 0xf1, 0x80})

ASM("and dl, 01000000b", 0, 3, {0x80, 0xe2, 0x40})
ASM("xor dl, 01000000b", 0, 3, {0x80, 0xf2, 0x40})

ASM("and dl, 10000000b", 0, 3, {0x80, 0xe2, 0x80})
ASM("xor dl, 10000000b", 0, 3, {0x80, 0xf2, 0x80})

ASM("mov r15, rsp", 0, 3, {0x49, 0x89, 0xe7})
ASM("mov r14, rsp", 0, 3, {0x49, 0x89, 0xe6})

ASM("sub rsp, %d", 1, 4, {0x48, 0x83, 0xec, 0x00})
ASM("add rsp, %d", 1, 4, {0x48, 0x83, 0xc4, 0x00})

ASM("mov rdi, rax", 0, 3, {0x48, 0x89, 0xc7})
ASM("syscall", 0, 2, {0x0f, 0x05})
ASM("ret", 0, 1, {0xc3})

ASM("test rax, rax", 0, 3, {0x48, 0x85, 0xc0})

ASM("add rax, rbx", 0, 3, {0x48, 0x01, 0xd8})
ASM("sub rax, rbx", 0, 3, {0x48, 0x29, 0xd8})
ASM("imul rbx", 0, 3, {0x48, 0xf7, 0xeb})
ASM("imul ebx", 0, 2, {0xf7, 0xeb})
ASM("idiv rbx", 0, 3, {0x48, 0xf7, 0xfb})
ASM("neg rax", 0, 2, {0xf7, 0xd8})

ASM("xor rax, rax", 0, 3, {0x48, 0x31, 0xc0})
ASM("xor rcx, rcx", 0, 3, {0x48, 0x31, 0xc9})
ASM("xor rdx, rdx", 0, 3, {0x48, 0x31, 0xd2})

ASM("cmp rax, rbx", 0, 3, {0x48, 0x39, 0xd8})

ASM("lahf", 0, 1, {0x9f})


ASM("shr cl, %d", 1, 3, {0xc0, 0xe9, 0x00})
ASM("shr cl, %d", 1, 3, {0xc0, 0xe9, 0x00})

ASM("shr dl, %d", 1, 3, {0xc0, 0xea, 0x00})
ASM("shr dl, %d", 1, 3, {0xc0, 0xea, 0x00})

ASM("or rcx, rdx", 0, 3, {0x48, 0x09, 0xd1})
ASM("and rcx, rdx", 0, 3, {0x48, 0x21, 0xd1})

ASM("or rax, rbx", 0, 3, {0x48, 0x09, 0xd8})
ASM("and rax, rbx", 0, 3, {0x48, 0x21, 0xd8})

ASM("mov [rbx], rax", 0, 3, {0x48, 0x89, 0x03})

ASM("mov rax, r14", 0, 3, {0x4c, 0x89, 0xf0})

ASM("mov rax, r14", 0, 3, {0x4c, 0x89, 0xf0})
ASM("add rax, %d", 1, 4, {0x48, 0x83, 0xc0, 0x00})
ASM("mov rax, r15", 0, 3, {0x4c, 0x89, 0xf8})
ASM("mov rax, [r14 + %d]", 1, 4, {0x49, 0x8b, 0x46, 0x00})
ASM("mov rax, [r15 + %d]", 1, 4, {0x49, 0x8b, 0x47, 0x00})

ASM("sete cl", 0, 3, {0x0f, 0x94, 0xc1})
ASM("setne cl", 0, 3, {0x0f, 0x95, 0xc1})
ASM("setg cl", 0, 3, {0x0f, 0x9f, 0xc1})
ASM("setge cl", 0, 3, {0x0f, 0x9d, 0xc1})
ASM("setl cl", 0, 3, {0x0f, 0x9c, 0xc1})
ASM("setle cl", 0, 3, {0x0f, 0x9e, 0xc1})

ASM("setb cl", 0, 3, {0x0f, 0x92, 0xc1})
ASM("setbe cl", 0, 3, {0x0f, 0x96, 0xc1})
ASM("seta cl", 0, 3, {0x0f, 0x97, 0xc1})
ASM("setae cl", 0, 3, {0x0f, 0x93, 0xc1})

ASM("jz %s", 4, 6, {0x0f, 0x84, 0x00, 0x00, 0x00, 0x00})	// 0x74 0x00 - short variant
ASM("jmp %s", 4, 5, {0xe9, 0x00, 0x00, 0x00, 0x00})		// 0xeb 0x00 - short variant
ASM("call %s", 4, 5, {0xe8, 0x00, 0x00, 0x00, 0x00})

ASM("fld qword [rsp]", 0, 3, {0xdd, 0x04, 0x24})
ASM("fld dword [rsp]", 0, 3, {0xd9, 0x04, 0x24})

ASM("fld qword [rsp + %d]", 1, 4, {0xdd, 0x44, 0x24, 0x00})
ASM("fld dword [rsp + %d]", 1, 4, {0xd9, 0x44, 0x24, 0x00})

ASM("fstp qword [rsp]", 0, 3, {0xdd, 0x1c, 0x24})
ASM("fstp dword [rsp]", 0, 3, {0xd9, 0x1c, 0x24})

ASM("fstp qword [rax]", 0, 2, {0xdd, 0x18})
ASM("fstp dword [rax]", 0, 2, {0xd9, 0x18})

ASM("fld qword [r15 + %d]", 1, 4, {0x41, 0xdd, 0x47, 0x00})
ASM("fld dword [r15 + %d]", 1, 4, {0x41, 0xd9, 0x47, 0x00})

ASM("fmul", 0, 2, {0xde, 0xc9})
ASM("fadd", 0, 2, {0xde, 0xc1})
ASM("fdiv", 0, 2, {0xde, 0xf9})
ASM("fsub", 0, 2, {0xde, 0xe9})
ASM("fsubr", 0, 2, {0xde, 0xe1})
ASM("fdivr", 0, 2, {0xde, 0xf1})

ASM("fucomip", 0, 2, {0xdf, 0xe9})
ASM("fcomip", 0, 2, {0xdf, 0xf1})
ASM("fdecstp", 0, 2, {0xd9, 0xf6})
ASM("fincstp", 0, 2, {0xd9, 0xf7})
ASM("ffree", 0, 2, {0xdd, 0xc1})
ASM("fchs", 0, 2, {0xd9, 0xe0})
ASM("fxch", 0, 2, {0xd9, 0xc9})

ASM("lea rax, [r15 + %d]", 1, 4, {0x49, 0x8d, 0x47, 0x00})
